/* 1)	In Assignment 3 of previous session, print the details of Managers with the help of delegate
EmployeeDelegate. (UniCast Delegate) */



1)In Assignment 3 of previous session, print the details of Managers with the help of delegate
EmployeeDelegate. (UniCast Delegate)

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Delegate
{
    public delegate double ManagerSal(double _sal);
    public delegate double Food(double _Food);
    public delegate double Petrol(double _Petrol);
    public delegate double Others(double _Others);
    public delegate double Gross(double _Gross);
    public delegate double Netsal(double _Netsal);
    
    public class Manager
    {
        public double _Petrol;
        public double _Food;
        public double _Others;
        public double _sal;
        public double _Gross;
        public double _Netsal;
        public double Pf;
        public double TDS;

        public double ManagerSalary(double _sal)
        {
            return _sal;
        }
        public double FoodDetails(double Sal)
        {
            _Food = Sal * 0.13;
            return _Food;

        }
        public double PetrolDetails(double Sal)
        {
            _Petrol = Sal * 0.08;
            return _Petrol;
        }
        public double OtherDetails(double Sal)
        {
            _Others = Sal * 0.03;
            return _Others;

        }
        public double GrossSalaryDetails(double Sal)
        {
            _Gross = Sal + _Food + _Petrol + _Others;
            return _Gross;

        }
        public double CalculateSalaryDetails(double Sal)
        {
            Pf = (_Gross * 0.10);
            TDS = (_Gross * 0.18);
            _Netsal = _Gross - (Pf + TDS);
            return _Netsal;
        }
    }
    class program
    {

        public static void Main(string[] args)
        {
            Manager m = new Manager();
            ManagerSal ms = new ManagerSal(m.ManagerSalary);
            double Sal = ms(60000);
            Console.WriteLine(Sal);
            Food f = new Food(m.FoodDetails);
            double FoodCost = f(Sal);
            Console.WriteLine(FoodCost);
            Petrol p = new Petrol(m.PetrolDetails);
            double PetrolCost = p(Sal);
            Console.WriteLine(PetrolCost);
            Others o = new Others(m.OtherDetails);
            double OthersCost = o(Sal);
            Console.WriteLine(OthersCost);
            Gross g = new Gross(m.GrossSalaryDetails);
            double GrossSalary = g(Sal);
            Console.WriteLine(GrossSalary);

            Netsal n = new Netsal(m.CalculateSalaryDetails);
            double NetSalary = n(Sal);
            Console.WriteLine(NetSalary);
        }
    }
}


/*60000
6500
4000
1500
62000
44640  */


----------------------------------------------------------------------------------------------------------------------------------------------------------------------

/* 2)	Create a MultiCast Delegate by adding address of another method to the above delegate to list the details of Marketing Executive */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp3
{ /*Multicaste Delegate*/
    public delegate void EmployeeDelegate();
    public class MultiCastDelegate
    {

        static void Main(string[] args)
        {
            Employee employee = new Employee();


            EmployeeDelegate employeeDelegate = new EmployeeDelegate(employee.Display);
            employeeDelegate += employee.MarketingExecutiveDisplay;


            employeeDelegate.Invoke();


        }
    }
    public class Employee
    {
        private int empId, meId;
        private string empName, meName;
        private string companyName, meCompanyName;
        private string designation, meDesignation;
        private string workLocation, meWorkLocation;

        public Employee()
        {
            Console.Write("Enter the emp id : ");
            this.empId = (Convert.ToInt32(Console.ReadLine()));
            Console.Write("Enter the emp name : ");
            this.empName = Console.ReadLine();

            Console.Write("Enter the Company Name : ");
            this.companyName = Console.ReadLine();

            Console.Write("Enter the emp designation : ");
            this.designation = Console.ReadLine();

            Console.Write("Enter the emp WorkLocation : ");
            this.workLocation = Console.ReadLine();

            Console.WriteLine("-------------------");

            Console.Write("Enter the MarketingExecutive id : ");
            this.meId = (Convert.ToInt32(Console.ReadLine()));

            Console.Write("Enter the MarketingExecutive name : ");
            this.meName = Console.ReadLine();

            Console.Write("Enter the MarketingExecutive Company Name : ");
            this.meCompanyName = Console.ReadLine();

            Console.Write("Enter the MarketingExecutive designation : ");
            this.meDesignation = Console.ReadLine();

            Console.Write("Enter the MarketingExecutive WorkLocation : ");
            this.meWorkLocation = Console.ReadLine();

        }

        public void Display()
        {
            Console.WriteLine("Employee Details-----------");
            Console.WriteLine("Employee Id : {0}", empId);
            Console.WriteLine("Employee Name : {0}", empName);
            Console.WriteLine("Employee Company Name : {0}", companyName);

            Console.WriteLine("Employee Designation : {0}", designation);

            Console.WriteLine("Employee Work Location : {0}", workLocation);
        }

        public void MarketingExecutiveDisplay()
        {
            Console.WriteLine("MarketingExecutiveDetails--------------");
            Console.WriteLine("MarketingExecutive Employee Id : {0}", meId);
            Console.WriteLine("MarketingExecutive Employee Name : {0}", meName);
            Console.WriteLine("MarketingExecutive Employee Company Name : {0}", meCompanyName);

            Console.WriteLine("MarketingExecutive Employee Designation : {0}", meDesignation);

            Console.WriteLine("MarketingExecutive Employee Work Location : {0}", meWorkLocation);
        }
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

/* 4)	Write separate ICICIBank class with EventHandlers for UnderBalance and
BalanceZero Events.
a)	Show message "Transaction cannot be continued as balance is insufficient/zero in Account".

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Delegates
{
    
        public delegate void Notify1();
        internal class IciciBank
        {
            protected int Account_Number1;
            protected string Customer_Name1;
            protected int Balance1;
            protected int Amount1;
            public event Notify1 ZeroBalance;
            public event Notify1 UnderBalance;
            public void Diposit1()
            {
                Console.WriteLine("enter account number");
                Account_Number1 = Convert.ToInt32(Console.ReadLine());
                Console.WriteLine("enter customer name");
                Customer_Name1 = Console.ReadLine();
                Console.WriteLine("enter amount to disposit");
                Balance1 = Convert.ToInt32(Console.ReadLine());
                Console.WriteLine("balance amount is" + ":" + Balance1);
            }
            public virtual void WithDraw1()
            {

                Console.WriteLine("enter amount to withdrawl");
                Amount1 = Convert.ToInt32(Console.ReadLine());

                if (Balance1 == 0)
                {
                    OnZeroBalance();
                }

                else if (Amount1 > (Balance1 - 11000))
                {
                    Onunderbalance();
                }
                else
                {
                    Balance1 = Balance1 - Amount1;
                    Console.WriteLine("your balance is" + ":" + Balance1 + "---" + "ICICITRANSACTION SUCUSSFULL");

                }

            }
            protected virtual void OnZeroBalance()
            {
                ZeroBalance?.Invoke();
            }
            protected virtual void Onunderbalance()
            {
                UnderBalance?.Invoke();
            }

        }

        class ICICI
        {
            public static void Main()
            {
                IciciBank account = new IciciBank();
                account.ZeroBalance += z1_ZeroBalance;
                account.UnderBalance += z2_underbalace;
                account.Diposit1();
                account.WithDraw1();
                Console.ReadKey();
            }

            public static void z1_ZeroBalance()
            {
                Console.WriteLine("Transaction cannot be continued as balance is zero in Account ");
            }
            public static void z2_underbalace()
            {
                Console.WriteLine("Transaction cannot be continued as balance is insufficient");

            }
        }
    }


----------------------------------------------------------------------------------------------------------------------------------------------------------------------

/* 

using System;

namespace Bank
{
    class Banks
    {
        public delegate void Accounts(int x);

        public class Account
        {
            public int accountNumber { get; set; }
            public string customerName { get; set; }
            public decimal balance = 1500;

            public event Accounts UnderBalance;
            public event Accounts ZeroBalance;

            public void Insufficient(int x)
            {
                UnderBalance(x);
            }

            public void DepositeAmount(int y)
            {
                ZeroBalance(y);
            }
            public void WithDraw(int x)
            {
                if (x < balance && balance != 0)
                {
                    Console.WriteLine("Transaction Successfull");
                    Console.WriteLine("Remaining Balance is:" + (balance - x));
                }
                else if (x > balance && balance != 0)
                {
                    Console.WriteLine("Insufficient Amount");
                    Console.WriteLine("Your Current Balance is:" + balance + "only");
                }
                else
                {
                    Console.WriteLine("Zero Balance:" + balance);
                }
            }
            public void Deposite(int x)
            {
                Console.WriteLine("Balance after depositing:" + (balance + x));
            }
        }

        static void Main(string[] args)
        {
            Account obj = new Account();
            Console.WriteLine("What you want to do.Withdraw Amount or Deposite:w or d");
            string wd = Console.ReadLine();
            if (wd == "w")
            {
                Console.WriteLine("Enter amount to be Withdrawn");
                int wdbalance = Convert.ToInt32(Console.ReadLine());
                obj.UnderBalance += new Accounts(obj.WithDraw);
                obj.Insufficient(wdbalance);
            }
            else
            {
                Console.WriteLine("Enter the amount to be Deposite:");
                int dpbalance = Convert.ToInt32(Console.ReadLine());
                obj.ZeroBalance += new Accounts(obj.Deposite);
                obj.Deposite(dpbalance);
            }
            Console.ReadKey();
        }
    }
}
